// Generated by Apple Swift version 4.0.3 effective-3.2.3 (swiftlang-900.0.74.1 clang-900.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("VibesPush")



@interface NSHTTPURLResponse (SWIFT_EXTENSION(VibesPush))
@property (nonatomic, readonly, copy) NSString * _Nonnull responseCodeDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull headersDescription;
@end




SWIFT_CLASS("_TtC9VibesPush17MessageCollection")
@interface MessageCollection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, TrackedEventType) {
/// Undefined case, since we parse a string in the convert method
  TrackedEventTypeUndefined = 0,
/// A launch event, tracked when the app is first opened
  TrackedEventTypeLaunch = 1,
/// A clickthru event, tracked when the app is opened from a push
/// notification
  TrackedEventTypeClickthru = 2,
};





@protocol VibesAPIDelegate;
@class NSArray;
enum VibesStorageEnum : NSInteger;
@protocol VibesLogger;
@class PKAddPassesViewController;

/// The main entry point for usage of the Vibes API.
SWIFT_CLASS("_TtC9VibesPush5Vibes")
@interface Vibes : NSObject
/// The released version of the Vibes SDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SDK_VERSION;)
+ (NSString * _Nonnull)SDK_VERSION SWIFT_WARN_UNUSED_RESULT;
/// Register push status
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull REGISTER_PUSH_STATUS;)
+ (NSString * _Nonnull)REGISTER_PUSH_STATUS SWIFT_WARN_UNUSED_RESULT;
/// List of Vibes delegates
@property (nonatomic, strong) id <VibesAPIDelegate> _Nullable delegate;
/// The shared (singleton) instance of Vibes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Vibes * _Null_unspecified shared;)
+ (Vibes * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// Trick to detect wheter the application has been started for
/// executing unit tests. In that case, we don’t want to send
/// events to Vibes backend.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isRunningThroughUnitTest;)
+ (BOOL)isRunningThroughUnitTest SWIFT_WARN_UNUSED_RESULT;
/// Configure the shared Vibes instance. This must be called before using any
/// of the functionality of Vibes, like registering your device.
/// \param appId the application ID provided by Vibes to identify this
/// application
///
/// \param trackEventTypes NSArray for Objc interoperability , type of tracking
/// events sent to Vibes; if not present, all events type (.launch, .clickthru)
/// will be monitored.
///
/// \param storageType define the type of storage for storing data locally; if not
/// present, data will be securely stored in the Keychain.
///
/// \param advertisingId AdSupport.advertisingId. If the application doesn’t
/// support it nil will be sent as value to the backend.
///
/// \param logger the logger to use. Defaults to a ConsoleLogger.
///
/// \param apiUrl an optional URL to hit for accessing for the Vibes API; if not
/// present, the staging URL will be used.
///
+ (void)configureWithAppId:(NSString * _Nonnull)appId trackedEventTypes:(NSArray * _Nonnull)trackedEventTypes storageType:(enum VibesStorageEnum)storageType advertisingId:(NSString * _Nullable)advertisingId logger:(id <VibesLogger> _Nullable)logger apiUrl:(NSString * _Nullable)apiUrl;
/// Add a new Vibes delegate to the list of current delegates.
/// \param observer VibesAPIDelegate
///
- (void)setWithDelegate:(id <VibesAPIDelegate> _Nonnull)delegate;
/// Get the status of the device registration
///
/// returns:
/// Boolean
- (BOOL)isDeviceRegistered SWIFT_WARN_UNUSED_RESULT;
/// Get the status of the device push registration
///
/// returns:
/// Boolean
- (BOOL)isDevicePushRegistered SWIFT_WARN_UNUSED_RESULT;
/// Parses the push token from the Data that Apple sends, and stores it
/// locally by converting the data to a hex string. Once this has been called,
/// <code>registerPush</code> can be called at will to enable push notifications from
/// Vibes.
/// \param fromData the data send from Apple and received in your AppDelegate’s
/// <code>application:didRegisterForRemoteNotificationsWithDeviceToken</code> function.
///
- (void)setPushTokenFromData:(NSData * _Nonnull)data;
/// Notify Vibes that a push message has been tapped on.
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     userInfo: the details from the remote notification
///   </li>
///   <li>
///     timestamp: an optional date for the receipt of the push notification
///     (default: now)
///   </li>
/// </ul>
- (void)receivedPushWith:(NSDictionary * _Nonnull)userInfo at:(NSDate * _Nonnull)timestamp;
/// Handle wallet pass payload in a push notification. This method will be called when a push notification is received
/// in the Customer AppDelegate class. If ‘wallet’ exits in the payload, it will download the pkpass, add it to a
/// PKAddViewController and return the instance of PKAddViewController.
/// \param notification Notification payload
///
/// \param completion a hanlder for receiving PKAddViewController
///
- (void)handleWalletPassWithNotification:(NSDictionary * _Nonnull)notification completion:(void (^ _Nonnull)(PKAddPassesViewController * _Nullable))completion;
/// ////////////////////////////////////////// OPERATIONS /////////////////////////////////////////////
/// Registers this device with Vibes.
- (void)registerDevice;
/// Unregisters this device with Vibes.
- (void)unregisterDevice;
/// Updates this device with Vibes.
/// \param lat latitude of the User location.
///
/// \param long longitude of the User location
///
- (void)updateDeviceWithLat:(double)lat long:(double)long_;
/// Register push notifications for this device with Vibes.
- (void)registerPush;
/// Unregister push notifications for this device with Vibes.
- (void)unregisterPush;
/// Get inbox messages.
- (void)getInboxMessages;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP9VibesPush16VibesAPIDelegate_")
@protocol VibesAPIDelegate
@optional
/// Callback to inform SDK users of the result of the device registration
/// \param deviceId the vibes device id that uniquely identifies the registered device
///
/// \param error Registration device error
///
- (void)didRegisterDeviceWithDeviceId:(NSString * _Nullable)deviceId error:(NSError * _Nullable)error;
/// Callback to inform SDK users of the result of the device unregistration
/// \param error Unregistration device error
///
- (void)didUnregisterDeviceWithError:(NSError * _Nullable)error;
/// Callback to inform SDK users of the result of the device push registration
/// \param error Push registration error
///
- (void)didRegisterPushWithError:(NSError * _Nullable)error;
/// Callback to inform SDK users of the result of the device push unregistration
/// \param error Push unregistration error
///
- (void)didUnregisterPushWithError:(NSError * _Nullable)error;
/// Callback to inform SDK users of the result of the device location update
/// \param error Location update error
///
- (void)didUpdateDeviceLocationWithError:(NSError * _Nullable)error;
/// Callback to inform SDK users of the result of getting Inbox messages.
/// \param messages Inbox messages repository
///
/// \param error Inbox messages get error
///
- (void)didGetInboxMessagesWithMessages:(MessageCollection * _Nullable)messages error:(NSError * _Nullable)error;
@end

@class NSURLResponse;

/// A protocol for logging the Vibes SDK’s HTTP-related logs
SWIFT_PROTOCOL("_TtP9VibesPush11VibesLogger_")
@protocol VibesLogger
/// Logs an HTTP request.
/// \param request the HTTP request to log
///
- (void)logWithRequest:(NSURLRequest * _Nonnull)request;
/// Logs an HTTP response with its accompanying data.
/// \param response the HTTP response to log
///
/// \param data the data received, if any
///
- (void)logWithResponse:(NSURLResponse * _Nonnull)response data:(NSData * _Nullable)data;
/// Logs an error.
/// \param error the error that occurred
///
- (void)logWithError:(NSError * _Nonnull)error;
@end

/// Type of storage to store credential
typedef SWIFT_ENUM(NSInteger, VibesStorageEnum) {
  VibesStorageEnumKEYCHAIN = 0,
  VibesStorageEnumUSERDEFAULTS = 1,
};

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
